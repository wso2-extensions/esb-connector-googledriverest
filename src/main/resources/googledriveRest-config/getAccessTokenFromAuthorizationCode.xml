<?xml version="1.0" encoding="UTF-8"?>
<!--
 ~  Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 ~
 ~  WSO2 Inc. licenses this file to you under the Apache License,
 ~  Version 2.0 (the "License"); you may not use this file except
 ~  in compliance with the License.
 ~  You may obtain a copy of the License at
 ~
 ~    http://www.apache.org/licenses/LICENSE-2.0
 ~
 ~  Unless required by applicable law or agreed to in writing,
 ~  software distributed under the License is distributed on an
 ~  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 ~  KIND, either express or implied.  See the License for the
 ~  specific language governing permissions and limitations
 ~  under the License.
-->
<template name="getAccessTokenFromAuthorizationCode" xmlns="http://ws.apache.org/ns/synapse">
    <parameter name="apiUrl" description="Base endpoint URL of GoogleAnalytics API."/>
    <parameter name="authorizationCode" description="Authorization code to be used to obtain the access token."/>
    <parameter name="redirectUrl" description="Authorization code to be used to obtain the access token."/>
    <sequence>
        <property name="uri.var.apiUrl" expression="$func:apiUrl"/>
        <property name="uri.var.authorizationCode" expression="$func:authorizationCode"/>
        <property name="uri.var.redirectUrl" expression="$func:redirectUrl"/>

        <!-- If the user sends the apiUrl it will be used, else it'll be fetched from the registry. -->
        <filter source="boolean(get-property('uri.var.apiUrl'))" regex="false">
            <then>
                <property name="uri.var.apiUrl"
                          expression="get-property('registry', 'connectors/GoogleAnalytics/apiUrl')"/>
            </then>
        </filter>
        <!-- If the user sends the redirectUrl it will be used, else it'll be fetched from the registry. -->
        <filter source="boolean(get-property('uri.var.redirectUrl'))" regex="false">
            <then>
                <property name="uri.var.redirectUrl"
                          expression="get-property('registry', 'connectors/GoogleAnalytics/redirectUrl')"/>
            </then>
        </filter>
        <property name="uri.var.clientId" expression="get-property('registry', 'connectors/GoogleAnalytics/clientId')"/>
        <property name="uri.var.clientSecret"
                  expression="get-property('registry', 'connectors/GoogleAnalytics/clientSecret')"/>
        <!-- Type of the grant used to get a new access token by negotiating the refresh token. -->
        <property name="uri.var.grantType" value="authorization_code"/>
        <payloadFactory media-type="json">
            <format>
                {
                "code": "$1",
                "grant_type": "$2",
                "redirect_uri": "$3",
                "client_secret": "$4",
                "client_id": "$5"
                }
            </format>
            <args>
                <arg expression="get-property('uri.var.authorizationCode')"/>
                <arg expression="get-property('uri.var.grantType')"/>
                <arg expression="get-property('uri.var.redirectUrl')"/>
                <arg expression="get-property('uri.var.clientSecret')"/>
                <arg expression="get-property('uri.var.clientId')"/>
            </args>
        </payloadFactory>
        <property name="messageType" value="application/x-www-form-urlencoded" scope="axis2"/>
        <call>
            <endpoint>
                <http method="post" uri-template="{+uri.var.apiUrl}/oauth2/v3/token"/>
            </endpoint>
        </call>
        <!-- Setting the access token and refresh token to the property. -->
        <property name="uri.var.accessToken" expression="json-eval($.access_token)"/>
        <property name="uri.var.refreshToken" expression="json-eval($.refresh_token)"/>
        <script language="js">
            <![CDATA[
             importPackage(Packages.org.apache.synapse.config);
             var newAccessToken = mc.getProperty('uri.var.accessToken');
             if(newAccessToken != null && newAccessToken != ''){
                var existingAccessToken = mc.getConfiguration().getRegistry().getResource("connectors/GoogleAnalytics/accessToken");
                if(existingAccessToken == null){
                  // Create the registry entry if no such entry exists.
                  mc.getConfiguration().getRegistry().newResource("connectors/GoogleAnalytics/accessToken",newAccessToken);
                } else {
                  // Update the registry entry if it already exists.
                  mc.getConfiguration().getRegistry().updateResource("connectors/GoogleAnalytics/accessToken",newAccessToken);
                }     
             }      
             var newRefreshToken = mc.getProperty('uri.var.refreshToken');
             if(newRefreshToken != null && newRefreshToken != ''){
                var existingRefreshToken = mc.getConfiguration().getRegistry().getResource("connectors/GoogleAnalytics/refreshToken");
                if(existingRefreshToken == null){
                  // Create the registry entry if no such entry exists.
                  mc.getConfiguration().getRegistry().newResource("connectors/GoogleAnalytics/refreshToken", newRefreshToken);
                } else {
                  // Update the registry entry if it already exists.
                  mc.getConfiguration().getRegistry().updateResource("connectors/GoogleAnalytics/refreshToken", newRefreshToken);
                }     
             }                                    
         ]]>
        </script>
        <!-- Remove custom Headers from the API Response -->
        <header name="Alt-Svc" action="remove" scope="transport"/>
        <header name="Alternate-Protocol" action="remove" scope="transport"/>
        <header name="X-Content-Type-Options" action="remove" scope="transport"/>
        <header name="X-Frame-Options" action="remove" scope="transport"/>
        <header name="X-XSS-Protection" action="remove" scope="transport"/>
        <header name="WWW-Authenticate" action="remove" scope="transport"/>
    </sequence>
</template>